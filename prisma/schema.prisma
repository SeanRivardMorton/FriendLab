generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Event {
  id            String     @id @default(cuid())
  name          String
  description   String?
  location      String?
  date          DateTime
  creator       User       @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId     String
  attendees     User[]     @relation("EventAttendees")
  Post          Post[]
  group         Group?     @relation(fields: [groupId], references: [id])
  groupId       String?
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
  event     Event?  @relation(fields: [eventId], references: [id])
  eventId   String?
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  accounts        Account[]
  posts           Post[]
  sessions        Session[]
  friendships     Friendship[] @relation("UserFriendships")
  friendOf        Friendship[] @relation("UserFriendOf")
  groupsOwned     Group[]      @relation("GroupOwner")
  groups          Group[]      @relation("GroupMembers")
  eventsCreated   Event[]      @relation("EventCreator")
  eventsAttending Event[]      @relation("EventAttendees")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation("GroupOwner", fields: [creatorId], references: [id])
  creatorId String
  members   User[]   @relation("GroupMembers")
  Event     Event[]
}

model Friendship {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  friendId  String
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  friend    User     @relation("UserFriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
